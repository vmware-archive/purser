# Service Dgraph - This is the service that should be used by the clients of Dgraph to talk to the server.
apiVersion: v1
kind: Service
metadata:
  name: purser-db
  labels:
    app: purser-db
spec:
  type: ClusterIP
  ports:
  - port: 5080
    targetPort: 5080
    name: zero-grpc
  - port: 6080
    targetPort: 6080
    name: zero-http
  - port: 8080
    targetPort: 8080
    name: server-http
  - port: 9080
    targetPort: 9080
    name: server-grpc
  selector:
    app: purser-db
---
# Dgraph StatefulSet runs 1 pod with one Zero and one Server containers.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: purser-dgraph
spec:
  serviceName: "dgraph"
  replicas: 1
  selector:
      matchLabels:
        app: purser-db
  template:
    metadata:
      labels:
        app: purser-db
    spec:
      containers:
      - name: zero
        image: dgraph/dgraph:v1.0.9
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: 1000Mi
            cpu: 300m
          requests:
            memory: 1000Mi
            cpu: 300m
        ports:
        - containerPort: 5080
          name: zero-grpc
        - containerPort: 6080
          name: zero-http
        volumeMounts:
        - name: datadir
          mountPath: /dgraph
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph zero --my=$(hostname -f):5080
      - name: server
        image: dgraph/dgraph:v1.0.9
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: 1500Mi
            cpu: 500m
          requests:
            memory: 1500Mi
            cpu: 500m
        ports:
        - containerPort: 8080
          name: server-http
        - containerPort: 9080
          name: server-grpc
        volumeMounts:
        - name: datadir
          mountPath: /dgraph
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph server --my=$(hostname -f):7080 --lru_mb 2048 --zero $(hostname -f):5080
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 10Gi
